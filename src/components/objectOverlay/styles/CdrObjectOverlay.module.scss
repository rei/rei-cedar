@use 'sass:map';
@import '../../../styles/settings/index';

$breakpoints: (
  '': '',
  '-sm': $cdr-breakpoint-sm,
  '-md': $cdr-breakpoint-md,
  '-lg': $cdr-breakpoint-lg
);

$positions: (
  'top-left': (top: 0, left: 0),
  'top-center': (top: 0, left: 50%, transform: translateX(-50%)),
  'top-right': (top: 0, right: 0),
  'center-left': (top: 50%, left: 0, transform: translateY(-50%)),
  'center-center': (top: 50%, left: 50%, transform: translate(-50%, -50%)),
  'center-right': (top: 50%, right: 0, transform: translateY(-50%)),
  'bottom-left': (bottom: 0, left: 0),
  'bottom-center': (bottom: 0, left: 50%, transform: translateX(-50%)),
  'bottom-right': (bottom: 0, right: 0)
);

$gradients: (
  'to-top': linear-gradient(to top, rgba(0, 0, 0, 0.5), transparent),
  'to-bottom': linear-gradient(to bottom, rgba(0, 0, 0, 0.5), transparent),
  'to-left': linear-gradient(to left, rgba(0, 0, 0, 0.5), transparent),
  'to-right': linear-gradient(to right, rgba(0, 0, 0, 0.5), transparent)
);

.cdr-object-overlay {
  position: relative;
  width: 100%;
  height: 100%;

  &[data-gradient]::before {
    content: '';
    position: absolute;
    inset: 0;
  }

  &__container {
    width: 100%;
    height: 100%;
  }

  &__content {
    position: absolute;
    margin: var(--margin);
    padding: var(--padding);

    @each $breakpoint-suffix, $min-width in $breakpoints {
      @if $breakpoint-suffix != '' {
        @media (min-width: $min-width) {
          margin: var(--margin#{$breakpoint-suffix});
          padding: var(--padding#{$breakpoint-suffix});
        }
      }
    }
  }

  // Create a mixin for breakpoints
  @mixin at-breakpoint($breakpoint) {
    @if $breakpoint == '' {
      @content;
    } @else {
      @media (min-width: map.get($breakpoints, $breakpoint)) {
        @content;
      }
    }
  }

  // Generate positions for all breakpoints
  @each $breakpoint-suffix, $min-width in $breakpoints {
    @include at-breakpoint($breakpoint-suffix) {
      // Position styles
      @each $position, $properties in $positions {
        $selector: if($breakpoint-suffix == '', 
                     '[data-position="#{$position}"]', 
                     '[data-position#{$breakpoint-suffix}="#{$position}"]');
                     
        &#{$selector} &__content {
          @each $prop, $value in $properties {
            #{$prop}: $value;
          }
          // Set unused positions to auto
          @each $side in top, right, bottom, left {
            @if not map-has-key($properties, $side) {
              #{$side}: auto;
            }
          }
        }
      }

      // Gradient styles
      @each $gradient, $direction in $gradients {
        $selector: if($breakpoint-suffix == '', 
                     '[data-gradient="#{$gradient}"]', 
                     '[data-gradient#{$breakpoint-suffix}="#{$gradient}"]');
                     
        &#{$selector}::before {
          background-image: $direction;
        }
      }
    }
  }
}
