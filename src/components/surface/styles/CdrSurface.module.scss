@use 'sass:map';

// Property maps
// TODO: Get these from Cedar Tokens
$properties: (
  background: (
    primary: var(--cdr-color-background-primary),
    secondary: var(--cdr-color-background-secondary),
    brand: var(--cdr-color-background-brand-spruce),
    sale: var(--cdr-color-background-sale),
  ),
  border-color: (
    primary: var(--cdr-color-border-primary),
    secondary: var(--cdr-color-border-secondary),
    success: var(--cdr-color-border-success),
    warning: var(--cdr-color-border-warning),
    error: var(--cdr-color-border-error),
    info: var(--cdr-color-border-info),
  ),
  border-width: (
    zero: var(--cdr-space-zero),
    sixteenth-x: var(--cdr-space-sixteenth-x),
    eighth-x: var(--cdr-space-eighth-x),
    three-sixteenth-x: var(--cdr-space-three-sixteenth-x),
    quarter-x: var(--cdr-space-quarter-x),
    three-eighth-x: var(--cdr-space-three-eighth-x),
    half-x: var(--cdr-space-half-x),
    three-quarter-x: var(--cdr-space-three-quarter-x),
    one-x: var(--cdr-space-one-x),
    one-and-a-half-x: var(--cdr-space-one-and-a-half-x),
    two-x: var(--cdr-space-two-x),
    three-x: var(--cdr-space-three-x),
    four-x: var(--cdr-space-four-x),
  ),
  border-style: (
    solid: solid,
    dashed: dashed,
    dotted: dotted,
  ),
  border-radius: (
    sharp: var(--cdr-radius-sharp),
    soft: var(--cdr-radius-soft),
    softer: var(--cdr-radius-softer),
    softest: var(--cdr-radius-softest),
    round: var(--cdr-radius-round),
  ),
  box-shadow: (
    flat: var(--cdr-prominence-flat),
    raised: var(--cdr-prominence-raised),
    elevated: var(--cdr-prominence-elevated),
    floating: var(--cdr-prominence-floating),
    lifted: var(--cdr-prominence-lifted),
  ),
);

$states: (rest, hover, active, checked, loading, disabled, visited);
$css-vars: (
  background: --cdr-surface-background,
  border-color: --cdr-surface-border-color,
  border-width: --cdr-surface-border-width,
  border-style: --cdr-surface-border-style,
  border-radius: --border-radius,
  box-shadow: --cdr-surface-box-shadow
);

.cdr-surface {
  appearance: none;
  display: block;
  position: relative;
  text-align: left;

  // Prevent inheritance styles
  .cdr-surface & {
    :where(&) {
      --cdr-surface-background: initial;
      --cdr-surface-border-color: initial;
      --cdr-surface-border-width: initial;
      --cdr-surface-border-style: initial;
      --cdr-surface-border-radius: initial;
      --cdr-surface-box-shadow: initial;
    }
  }

  // Generate base styles
  @each $prop, $values in $properties {
    @each $value-name, $value in $values {
      &[data-#{$prop}='#{$value-name}'] {
        #{map.get($css-vars, $prop)}: #{$value};
      }
    }
  }

  // Generate state-based styles
  @each $state in $states {
    @if $state != 'rest' {
      $selector: if(
        $state == 'hover',
        '&:hover:not([aria-pressed="true"], [aria-checked="true"], :disabled)',
        if($state == 'active', '&:active, &:focus', '&[data-#{$state}="true"]')
      );

      @each $prop, $values in $properties {
        @each $value-name, $value in $values {
          &[data-#{$prop}-#{$state}='#{$value-name}'] {
            #{$selector} {
              #{map.get($css-vars, $prop)}: #{$value};
            }
          }
        }
      }
    }
  }

  background-color: var(--cdr-surface-background);
  border-radius: var(--cdr-surface-border-radius, var(--border-radius)); // Added fallback for potential naming mismatch
  box-shadow: var(--cdr-surface-box-shadow);

  background-image: var(--cdr-surface-background-image);
  background-size: var(--cdr-surface-background-size);
  background-position: var(--cdr-surface-background-position);
  background-repeat: no-repeat;

  &::before {
    border: var(--cdr-surface-border-width) var(--cdr-surface-border-style) var(--cdr-surface-border-color);
    border-radius: inherit;
    content: '';
    inset: 0;
    position: absolute;
    transition: border-color var(--cdr-duration-3-x) var(--cdr-timing-function-ease);
    will-change: transition;
    pointer-events: none;
    z-index: 0;
  }

  transition:
    background-color var(--cdr-duration-3-x) var(--cdr-timing-function-ease),
    box-shadow var(--cdr-duration-3-x) var(--cdr-timing-function-ease);

  &:hover:not([aria-pressed='true'], [aria-checked='true'], :disabled) {
    background-color: var(--cdr-surface-background-hover, var(--cdr-surface-background));
    box-shadow: var(--cdr-surface-box-shadow-hover, var(--cdr-surface-box-shadow));

    &::before {
      border: var(--cdr-surface-border-width-hover, var(--cdr-surface-border-width))
        var(--cdr-surface-border-style-hover, var(--cdr-surface-border-style))
        var(--cdr-surface-border-color-hover, var(--cdr-surface-border-color));
    }
  }

  &:focus,
  &:active,
  &[aria-pressed='true']:focus,
  &[aria-pressed='true']:active,
  &[aria-checked='true']:focus,
  &[aria-checked='true']:active {
    background-color: var(--cdr-surface-background-active, var(--cdr-surface-background));
    box-shadow: var(--cdr-surface-box-shadow-active, var(--cdr-surface-box-shadow));

    &::before {
      border: var(--cdr-surface-border-width-active, var(--cdr-surface-border-width))
        var(--cdr-surface-border-style-active, var(--cdr-surface-border-style))
        var(--cdr-surface-border-color-active, var(--cdr-surface-border-color));
    }
  }

  &[disabled],
  &[disabled]:hover,
  &[disabled]:focus,
  &[aria-disabled='true'],
  &[aria-disabled='true']:hover,
  &[aria-disabled='true']:focus {
    background-color: var(--cdr-surface-background-disabled, var(--cdr-surface-background));
    box-shadow: var(--cdr-surface-box-shadow-disabled, var(--cdr-surface-box-shadow));
    cursor: not-allowed;

    &::before {
      border: var(--cdr-surface-border-width-disabled, var(--cdr-surface-border-width))
        var(--cdr-surface-border-style-disabled, var(--cdr-surface-border-style))
        var(--cdr-surface-border-color-disabled, var(--cdr-surface-border-color));
    }
  }

  &[aria-pressed='true'],
  &[aria-checked='true'] {
    background-color: var(--cdr-surface-background-checked, var(--cdr-surface-background));
    box-shadow: var(--cdr-surface-box-shadow-checked, var(--cdr-surface-box-shadow));

    &::before {
      border: var(--cdr-surface-border-width-checked, var(--cdr-surface-border-width))
        var(--cdr-surface-border-style-checked, var(--cdr-surface-border-style))
        var(--cdr-surface-border-color-checked, var(--cdr-surface-border-color));
    }
  }

  &[data-loading='true'] {
    background-color: var(--cdr-surface-background-loading, var(--cdr-surface-background));
    box-shadow: var(--cdr-surface-box-shadow-loading, var(--cdr-surface-box-shadow));

    &::before {
      border: var(--cdr-surface-border-width-loading, var(--cdr-surface-border-width))
        var(--cdr-surface-border-style-loading, var(--cdr-surface-border-style))
        var(--cdr-surface-border-color-loading, var(--cdr-surface-border-color));
    }
  }
}
