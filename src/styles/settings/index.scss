$cdr-warn: false;
@use 'sass:map';
@use 'sass:list';
@import '../../../node_modules/@rei/cdr-tokens/dist/rei-dot-com/scss/cdr-tokens.scss';
@import './alignment.vars';
@import './options.vars';
@import './visibility.vars';
@import './fluid.vars';

$border-widths: (
  'zero': $cdr-space-zero,
  'sixteenth-x': $cdr-space-inset-sixteenth-x,
  'eighth-x': $cdr-space-inset-eighth-x,
  'three-sixteenth-x': $cdr-space-inset-three-sixteenth-x,
  'quarter-x': $cdr-space-inset-quarter-x,
  'three-eighth-x': $cdr-space-inset-three-eighth-x,
);

$border-styles: 'dotted', 'dashed', 'solid';

$radii: (
  'sharp': $cdr-radius-sharp,
  'soft': $cdr-radius-soft,
  'softer': $cdr-radius-softer,
  'softest': $cdr-radius-softest,
  'round': $cdr-radius-round,
);

$shadows: (
  'flat': $cdr-prominence-flat,
  'raised': $cdr-prominence-raised,
  'elevated': $cdr-prominence-elevated,
  'floating': $cdr-prominence-floating,
  'lifted': $cdr-prominence-lifted,
);

@mixin cdr-background-mixin($options, $component, $modifier: 'undefined', $state: 'undefined') {
  $statePart: '';
  $modifierPart: '';

  @if $state != 'undefined' {
    $statePart: -#{$state};
  }

  @if $modifier != 'undefined' {
    $modifierPart: -#{$modifier};
  }

  background: var(
    --cdr-#{$component}#{$modifierPart}-background-color#{$statePart},
    var(
      --cdr-color-background-#{$component}#{$modifierPart}#{$statePart},
      #{map.get($options, $modifier, $state)}
    )
  );
}

@mixin cdr-border-color-mixin($options, $component, $modifier: 'undefined', $state: 'undefined') {
  $statePart: '';
  $modifierPart: '';

  @if $state != 'undefined' {
    $statePart: -#{$state};
  }

  @if $modifier != 'undefined' {
    $modifierPart: -#{$modifier};
  }

  --cdr-#{$component}-border-color-default: var(
    --cdr-#{$component}#{$modifierPart}-border-color#{$statePart},
    var(
      --cdr-color-border-#{$component}#{$modifierPart}#{$statePart},
      #{map.get($options, $modifier, $state)}
    )
  );
}

@mixin cdr-border-width-mixin($component, $key) {
  --cdr-#{$component}-border-width-default: var(
    --cdr-#{$component}-border-width,
    var(--cdr-space-inset-#{$key}, #{map.get($border-widths, $key)})
  );
}

@mixin cdr-border-style-mixin($component, $key) {
  --cdr-#{$component}-border-style-default: var(
    --cdr-#{$component}-border-style,
    var(--cdr-border-style-#{$key}, #{$key})
  );
}

@mixin cdr-border-mixin($component) {
  position: relative;

  &::after {
    border-radius: var(--cdr-#{$component}-radius-default);
    pointer-events: none;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    content: '';
    border: var(--cdr-#{$component}-border-width-default)
      var(--cdr-#{$component}-border-style-default) var(--cdr-#{$component}-border-color-default);
  }
}

@mixin cdr-radius-mixin($component, $key) {
  --cdr-#{$component}-radius-default: var(
    --cdr-#{$component}-radius,
    var(--cdr-radius-#{$key}, #{map.get($radii, $key)})
  );
  border-radius: var(--cdr-#{$component}-radius-default);
  overflow: hidden;
}

@mixin cdr-shadow-mixin($component, $key) {
  box-shadow: var(
    --cdr-#{$component}-shadow,
    var(--cdr-prominence-#{$key}, #{map.get($shadows, $key)})
  );
}
